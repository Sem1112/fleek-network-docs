#!/bin/bash

# <!-- IGNORE: This line is intentional DO NOT MODIFY --><pre><script>document.querySelector('body').firstChild.textContent = '#!/bin/bash'</script>

# "Get Fleek Network" is an attempt to make our software more accessible.
# By providing scripts to automate the installation process of our software,
# we believe that it can help improve the onboarding experience of our users.
#
# Quick install: `curl https://get.fleek.network | bash`
#
# This script automates the process illustrated in our "Getting started" guides
# advanced users might find it better to follow the instructions in the doc version
# If that's your preference, go ahead and check our guides https://docs.fleek.network
#
# Contributing?
# - If you'd like to test changes locally use the env var `USE_BRANCH_NAME_FOR_GH_RAW`, for remote locales pulls
#
# Found an issue? Please report it here: https://github.com/fleek-network/get.fleek.network

# Default to branch "main"
useBranch=${USE_BRANCH_NAME_FOR_GH_RAW="main"}

# Workdir
if ! cd "$(mktemp -d)"; then
  echo "👹 Oops! We tried to create a temporary directory to host some install artifacts but failed for some reason..."

  exit 1
fi

# Date
dateRuntime=$(date '+%Y%m%d%H%M%S')

# Defaults
defaultName="lightning"
defaultLightningPath="$HOME/fleek-network/$defaultName"
defaultLightningLogPath="/var/log/$defaultName"
defaultLightningDiagnosticFilename="diagnostic.log"
defaultLightningOutputFilename="output.log"
defaultLightningDiagnosticLogAbsPath="$defaultLightningLogPath/$defaultLightningDiagnosticFilename"
defaultLightningOutputLogAbsPath="$defaultLightningLogPath/$defaultLightningOutputFilename"
defaultLightningSystemdServiceName="$defaultName"
defaultLightningSystemdServicePath="/etc/systemd/system/$defaultLightningSystemdServiceName.service"
defaultLightningConfigFilename="config.toml"
defaultLightningBasePath="$HOME/.$defaultName"
defaultLightningConfigPath="$defaultLightningBasePath/$defaultLightningConfigFilename"
defaultLightningConfigBackupPath="$defaultLightningConfigPath.backup.$dateRuntime"
defaultLightningHttpsRepository="https://github.com/fleek-network/$defaultName.git"

# App state
selectedLightningPath="$defaultLightningPath"
vCPUsMinusOne=$(($vCPUs - 1))

# Utils
identifyOS() {
  unameOut="$(uname -s)"

  case "${unameOut}" in
      Linux*)     os=Linux;;
      Darwin*)    os=Mac;;
      CYGWIN*)    os=Cygwin;;
      MINGW*)     os=MinGw;;
      *)          os="UNKNOWN:${unameOut}"
  esac

  echo "$os" | tr '[:upper:]' '[:lower:]'
}

isOSSupported() {
  os=$(identifyOS)

  if [[ "$os" == "linux" ]]; then
    distro=$(identifyDistro)

    if [[ "$distro" == "ubuntu" ]]; then
      currVersion=$(lsb_release -r -s | tr -d '.')

      if [[ "$currVersion" -lt "2204" ]]; then
        echo
        echo "👹 Oops! You'll need Ubuntu 22.04 at least"
        echo

        exit 1
      fi
    elif [[ "$distro" == "debian" ]]; then
      currVersion=$(lsb_release -r -s | tr -d '.')

      if [[ "$currVersion" -lt "11" ]]; then
        echo
        echo "👹 Oops! You'll need Debian 11 at least"
        echo

        exit 1
      fi
    else
      printf "👹 Oops! Your operating system (%) distro (%s) is not supported by the installer at this time. Check our guides to learn how to install on your own https://docs.fleek.network\n" "$os" "$distro"

      exit 1    
    fi

    echo "✅ Operating system ($os), distro ($distro) is supported!"
  else
    printf "👹 Oops! Your operating system (%) is not supported by the installer at this time. Check our guides to learn how to install on your own https://docs.fleek.network\n" "$os"

    exit 1
  fi
}

# The white space before and after is intentional
cat << "ART"

  ⭐️ Fleek Network Lightning CLI ⭐️

                  .eeeeeeeee
                  .$$$$$$$$P"
                .$$$$$$$$P
                z$$$$$$$$P
              z$$$$$$$$"
              z$$$$$$$$"
            d$$$$$$$$"
            d$$$$$$$$"
          .d$$$$$$$P
        .$$$$$$$$P
        .$$$$$$$$$.........
      .$$$$$$$$$$$$$$$$$$"
      z$$$$$$$$$$$$$$$$$P"
    -**********$$$$$$$P
              d$$$$$$"
            .d$$$$$$"
            .$$$$$$P"
          z$$$$$$P
          d$$$$$$"
        .d$$$$$$"
      .$$$$$$$"
      z$$$$$$$beeeeee
    d$$$$$$$$$$$$$*
    ^""""""""$$$$$"
            d$$$*
          d$$$"
          d$$*
        d$P"
      .$$"
      .$P"
    .$"
    .P"
  ."
  /"

ART

echo
echo "★★★★★★★★★ 🌍 Website https://fleek.network"
echo "★★★★★★★★★ 📚 Documentation https://docs.fleek.network"
echo "★★★★★★★★★ 💾 Git repository https://github.com/fleek-network/lightning"
echo "★★★★★★★★★ 🤖 Discord https://discord.gg/fleekxyz"
echo "★★★★★★★★★ 🐤 Twitter https://twitter.com/fleek_net"
echo "★★★★★★★★★ 🎨 Ascii art by https://www.asciiart.eu"
echo

printf "🤖 Check if operating system is supported\n"
isOSSupported

(
  exec < /dev/tty;

  # 🚑 Check if running in Bash and supported version
  [ "$BASH" ] || { printf >&2 '🙏 Run the script with Bash, please!\n'; exit 1; }
  (( BASH_VERSINFO[0] > 4 || BASH_VERSINFO[0] == 4 && BASH_VERSINFO[1] >= 2 )) || { printf >&2 '🙏 Bash 4.2 or newer is required!\n'; exit 1; }

  # 🚑 Check total Processing Units
  defaultMinCPUUnitsCount=2
  vCPUs=$(nproc --all)
  if [[ "$vCPUs" -lt "$defaultMinCPUUnitsCount" ]]; then
    while read -rp "😅 The installer needs at least $defaultMinCPUUnitsCount total processing units, your system has $vCPUs. The installer is likely to fail, would you like to continue? (yes/no)" answer; do
      if [[ "$answer" == [nN] || "$answer" == [nN][oO] ]]; then
        printf "🦖 Exited the installation process\n\n"

        exit 1
      elif [[ "$answer" == [yY] || "$answer" == [yY][eE][sS] ]]; then
        printf "😅 Good luck!\n\n"

        break;
      fi

      printf "💩 Uh-oh! We expect a yes or no answer. Try again...\n"
    done
  fi

  # 🚑 Check if ports available
  # Obs: In the future there'll be ports for Worker (80*1) and Mempool (80*2)
  declare -a requiredPorts=(4069 8000 8001 8002)

  hasPortsAvailable=0
  for port in "${requiredPorts[@]}"; do
    if lsof -i :"$port" >/dev/null; then
      printf "💩 Uh-oh! The port %s is required but is in use...\n" "$port"

      hasPortsAvailable=1
    fi
  done

  if [[ "$hasPortsAvailable" -eq 1 ]]; then
    printf "👹 Oops! Required port(s) are in use, make sure the ports are open before retrying, please!\n"

    exit 1
  fi

  # TODO: Provide support for sudoers
  # initial version stick with root user
  if [ "$(id -u)" -ne 0 ]; then
    printf "😅 Our apologies! You need to run as root. We should provide support for sudoers shortly 🙏\n" >&2;

    exit 1;
  fi

  # TODO: Native install process
)