#!/bin/bash

# <!-- IGNORE: This line is intentional DO NOT MODIFY --><pre><script>document.querySelector('body').firstChild.textContent = '#!/bin/bash'</script>

# "Get Fleek Network" is an attempt to make our software more accessible.
# By providing scripts to automate the installation process of our software,
# we believe that it can help improve the onboarding experience of our users.
#
# Quick install: `curl https://get.fleek.network | bash`
#
# This script automates the process illustrated in our "Getting started" guides
# advanced users might find it better to follow the instructions in the doc version
# If that's your preference, go ahead and check our guides https://docs.fleek.network
#
# Contributing?
# - If you'd like to test changes locally use the env var `USE_BRANCH_NAME_FOR_GH_RAW`, `LIGHTNING_BRANCH`, for remote locales pulls
#
# Found an issue? Please report it here: https://github.com/fleek-network/get.fleek.network

# Workdir
if ! cd "$(mktemp -d)"; then
  echo "👹 Oops! We tried to create a temporary directory to host some install artifacts but failed for some reason..."

  exit 1
fi

# Date
dateRuntime=$(date '+%Y%m%d%H%M%S')

# Defaults
defaultName="lightning"
defaultCLIBuildName="$defaultName-node"
defaultCLIAlias="lgtnn"
defaultLightningPath="$HOME/fleek-network/$defaultName"
defaultLightningLogPath="/var/log/$defaultName"
defaultLightningDiagnosticFilename="diagnostic.log"
defaultLightningOutputFilename="output.log"
defaultLightningDiagnosticLogAbsPath="$defaultLightningLogPath/$defaultLightningDiagnosticFilename"
defaultLightningOutputLogAbsPath="$defaultLightningLogPath/$defaultLightningOutputFilename"
defaultLightningSystemdServiceName="$defaultName"
defaultLightningSystemdServicePath="/etc/systemd/system/$defaultLightningSystemdServiceName.service"
defaultLightningConfigFilename="config.toml"
defaultLightningBasePath="$HOME/.$defaultName"
defaultLightningConfigPath="$defaultLightningBasePath/$defaultLightningConfigFilename"
defaultLightningConfigBackupPath="$defaultLightningConfigPath.backup.$dateRuntime"
defaultLightningHttpsRepository="https://github.com/fleek-network/$defaultName.git"
defaultDiscordUrl="https://discord.gg/fleekxyz"

# App state
vCPUs=$(nproc --all)
selectedLightningPath="$defaultLightningPath"
vCPUsMinusOne=$(($vCPUs - 1))

# Utils
identifyOS() {
  unameOut="$(uname -s)"

  case "${unameOut}" in
      Linux*)     os=Linux;;
      Darwin*)    os=Mac;;
      CYGWIN*)    os=Cygwin;;
      MINGW*)     os=MinGw;;
      *)          os="UNKNOWN:${unameOut}"
  esac

  echo "$os" | tr '[:upper:]' '[:lower:]'
}

identifyDistro() {
  if [[ -f /etc/os-release ]]; then
    source /etc/os-release
    echo "$ID"

    exit 0
  fi
  
  uname
}

isOSSupported() {
  os=$(identifyOS)

  if [[ "$os" == "linux" ]]; then
    distro=$(identifyDistro)

    if [[ "$distro" == "ubuntu" ]]; then
      currVersion=$(lsb_release -r -s | tr -d '.')

      if [[ "$currVersion" -lt "2204" ]]; then
        echo
        echo "👹 Oops! You'll need Ubuntu 22.04 at least"
        echo

        exit 1
      fi
    elif [[ "$distro" == "debian" ]]; then
      currVersion=$(lsb_release -r -s | tr -d '.')

      if [[ "$currVersion" -lt "11" ]]; then
        echo
        echo "👹 Oops! You'll need Debian 11 at least"
        echo

        exit 1
      fi
    else
      printf "👹 Oops! Your operating system (%) distro (%s) is not supported by the installer at this time. Check our guides to learn how to install on your own https://docs.fleek.network\n" "$os" "$distro"

      exit 1    
    fi

    echo "✅ Operating system ($os), distro ($distro) is supported!"
  else
    printf "👹 Oops! Your operating system (%) is not supported by the installer at this time. Check our guides to learn how to install on your own https://docs.fleek.network\n" "$os"

    exit 1
  fi
}

hasCommand() {
  command -v "$1" >/dev/null 2>&1
}

# The white space before and after is intentional
cat << "ART"

  ⭐️ Fleek Network Lightning CLI installer ⭐️

              zeeeeee-
              z$$$$$$"
            d$$$$$$"
            d$$$$$P
          d$$$$$P
          $$$$$$"
        .$$$$$$"
      .$$$$$$"
      4$$$$$$$$$$$$$"
    z$$$$$$$$$$$$$"
    """""""3$$$$$"
          z$$$$P
          d$$$$"
        .$$$$$"
      z$$$$$"
      z$$$$P
    d$$$$$$$$$$"
    *******$$$"
        .$$$"
        .$$"
      4$P"
      z$"
    zP
    z"
  /

ART

echo
echo "★★★★★★★★★ 🌍 Website https://fleek.network"
echo "★★★★★★★★★ 📚 Documentation https://docs.fleek.network"
echo "★★★★★★★★★ 💾 Git repository https://github.com/fleek-network/lightning"
echo "★★★★★★★★★ 🤖 Discord https://discord.gg/fleekxyz"
echo "★★★★★★★★★ 🐤 Twitter https://twitter.com/fleek_net"
echo "★★★★★★★★★ 🎨 Ascii art by https://www.asciiart.eu"
echo

printf "🤖 Check if operating system is supported\n"
isOSSupported

(
  exec < /dev/tty;

  # 🚑 Check if running in Bash and supported version
  [ "$BASH" ] || { printf >&2 '🙏 Run the script with Bash, please!\n'; exit 1; }
  (( BASH_VERSINFO[0] > 4 || BASH_VERSINFO[0] == 4 && BASH_VERSINFO[1] >= 2 )) || { printf >&2 '🙏 Bash 4.2 or newer is required!\n'; exit 1; }

  # 🚑 Check total Processing Units
  defaultMinCPUUnitsCount=2
  vCPUs=$(nproc --all)
  if [[ "$vCPUs" -lt "$defaultMinCPUUnitsCount" ]]; then
    while read -rp "😅 The installer needs at least $defaultMinCPUUnitsCount total processing units, your system has $vCPUs. The installer is likely to fail, would you like to continue? (yes/no)" answer; do
      if [[ "$answer" == [nN] || "$answer" == [nN][oO] ]]; then
        printf "🦖 Exited the installation process\n\n"

        exit 1
      elif [[ "$answer" == [yY] || "$answer" == [yY][eE][sS] ]]; then
        printf "😅 Good luck!\n\n"

        break;
      fi

      printf "💩 Uh-oh! We expect a yes or no answer. Try again...\n"
    done
  fi

  # 🚑 Check if ports available
  # Obs: In the future there'll be ports for Worker (80*1) and Mempool (80*2)
  declare -a requiredPorts=(4069 8000 8001 8002)

  hasPortsAvailable=0
  for port in "${requiredPorts[@]}"; do
    if lsof -i :"$port" >/dev/null; then
      printf "💩 Uh-oh! The port %s is required but is in use...\n" "$port"

      hasPortsAvailable=1
    fi
  done

  if [[ "$hasPortsAvailable" -eq 1 ]]; then
    printf "👹 Oops! Required port(s) are in use, make sure the ports are open before retrying, please!\n"

    exit 1
  fi

  # TODO: Provide support for sudoers
  # initial version stick with root user
  if [ "$(id -u)" -ne 0 ]; then
    printf "😅 Our apologies! You need to run as root. We should provide support for sudoers shortly 🙏\n" >&2;

    exit 1;
  fi

  # Install location
  printf "🤖 The $defaultName source-code is going to be stored in the recommended path %s (otherwise, type \"n\" to modify path)\n" "$defaultLightningPath"
  printf -v prompt "Should we proceed and install to path %s? (yes/no)" "$defaultLightningPath"

  while read -r -p "$prompt"$'\n> ' answer; do
    if [[ "$answer" == [nN] || "$answer" == [nN][oO] ]]; then
      printf -v prompt "\n🙋‍♀️ What path should we clone the %s source-code to?\n" "$defaultName"
      read -r -p "$prompt"$'\n> ' answer

      if [[ -d "$answer" ]]; then
        printf "👹 Oops! The path %s already exists! This might be annoying but we don't want to mess with your system. So, clear the path and try again...\n" "$answer"

        exit 1
      fi

      if ! mkdir -p "$selectedLightningPath"; then
        printf "👹 Oops! Failed to create the path %s\n" "$selectedLightningPath"

        exit 1
      fi

      selectedLightningPath="$answer"

      break
    fi

    if [[ "$answer" == [yY] || "$answer" == [yY][eE][sS] ]]; then
      selectedLightningPath="$defaultLightningPath"
      
      break
    fi
  done

  # OS update
  # TODO: should compute per Linux distro
  printf "🤖 Update and upgrade apt-get\n"
  sudo DEBIAN_FRONTEND=noninteractive apt-get update -yq
  sudo DEBIAN_FRONTEND=noninteractive apt-get upgrade -yq

  # Dependencies verification process
  if ! hasCommand git; then
    printf "🤖 Install Git\n"
    sudo DEBIAN_FRONTEND=noninteractive apt-get install git -yq
  fi

  printf "🤖 Clone the %s source-code (git repository) to %s\n" "$defaultName" "$selectedLightningPath"
  if [[ -n ${LIGHTNING_BRANCH+x} ]]; then
    echo "🥷 Switch to branch $LIGHTNING_BRANCH"
    if ! sudo git clone -b "$LIGHTNING_BRANCH" "$defaultLightningHttpsRepository" "$selectedLightningPath"; then
      echo "👹 Oops! Failed to clone the $defaultName repository"

      exit 1
    fi
  else
    if ! sudo git clone $defaultLightningHttpsRepository "$selectedLightningPath"; then
      echo "👹 Oops! Failed to clone the $defaultName repository"

      exit 1
    fi
  fi

  printf "🤖 Change directory to %s (git repository)\n" "$selectedLightningPath"
  if ! cd "$selectedLightningPath"; then
    printf "👹 Oops! Failed to change directory to %s\n" "$selectedLightningPath"

    exit 1
  fi

  # Check if rust toolchain is available
  if ! command -vp "cargo" &> /dev/null && ! command -vp "rustc" &> /dev/null; then
    printf "🤖 Install the Rustup tool\n"
    curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y

    echo

    printf "🤖 Reload PATH environments to include Cargo\n"
    source "$HOME/.cargo/env"
    
    echo

    printf "✅ Rust is installed!\n"

    printf "Cargo version is %s\n" "$(cargo --version)"
  else
    printf "🤖 Update Rustup\n"
    rustup update
  fi

  printf "🤖 Install the build-essentials, libraries and packages, necessary for compiling general software and for our use-case %s CLI\n" "$defaultName"
  sudo DEBIAN_FRONTEND=noninteractive apt-get install build-essential cmake clang pkg-config libssl-dev protobuf-compiler gcc-multilib -yq

  if ! hasCommand make; then
    printf "🤖 Install make\n"
    sudo DEBIAN_FRONTEND=noninteractive apt-get install make -yq
  fi

  printf "🤖 Build and install the %s CLI\n" "$defaultName"

  if ! cargo +stable build --release; then
    printf "👹 Oops! Failed to build and install the %s CLI. If you are experiencing issues, help us improve by letting us know in our Discord %s\n" "$defaultName" "$defaultDiscordUrl"

    exit 1
  fi

  printf "🤖 Symlink the %s CLI binary to /usr/local/bin. By default rustup should've set the .cargo/bin into your system PATH, in any case we'll attempt to symlink to ensure %s is available globally\n" "$defaultName" "$defaultDiscordUrl"
  if [[ -f "$HOME/.cargo/bin/$defaultName" ]]; then
    if ! ln -s "$HOME/.cargo/bin/$defaultName" /usr/local/bin/$defaultCLIAlias; then
      printf "👹 Oops! Failed to symlink %s to /usr/local/bin/%s\n" "$HOME/.cargo/bin/$defaultName" "$defaultName"
      echo
      read -rp "😅 After the installation, if $defaultName CLI command is not available globally, then you need to add $HOME/.cargo/bin/ursa to your system PATH or symlink the binary to /usr/local/bin/$defaultName, as we've failed to do it. Press ENTER to continue..."
    fi
  else
    if ! ln -s "$selectedLightningPath/target/release/$defaultCLIBuildName" /usr/local/bin/$defaultCLIAlias; then
      printf "👹 Oops! Failed to symlink %s to /usr/local/bin/$defaultCLIAlias\n" "$selectedLightningPath/target/release/$defaultCLIBuildName"
      echo
      read -rp "😅 After the installation, if $defaultName $defaultCLIBuildName CLI command is unavailable globally, then you need to add $selectedLightningPath/target/release/$defaultCLIBuildName to your system PATH or symlink the binary to /usr/local/bin/$defaultCLIAlias, as we've failed to do it. Press ENTER to continue..."
    fi
  fi

  printf "👌 Great! You have successfully installed required packages, libraries, have compiled and installed %s\n\n" "$defaultName"
  printf "The %s CLI should be available globally, there's a symlink to the /usr/local/bin/%s. Which means that from now on you can start a Network Node by typing %s\n" "$defaultName" "$defaultCLIAlias" "$defaultCLIAlias"

  if hasCommand ufw && ufw status | grep -q 'Status: active'; then
    printf "💡 Detected that ufw is active\n"

    printf -v prompt "🚓 Warning! Make sure you don't have the ports %s blocked by a firewall. The installer will fail if you don't have the required ports open! Press ENTER to continue..." "${requiredPorts[*]}"
    read -rp "$prompt"
  fi

)