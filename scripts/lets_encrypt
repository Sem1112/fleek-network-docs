#!/bin/bash

# <!-- IGNORE: This line is intentional DO NOT MODIFY --><pre><script>document.querySelector('body').firstChild.textContent = '#!/bin/bash'</script>

# "Get Fleek Network" is an attempt to make our software more accessible.
# By providing scripts to automate the installation process of our software,
# we believe that it can help improve the onboarding experience of our users.
#
# Quick install: `curl https://get.fleek.network/install_native | bash`
#
# This script automates the process illustrated in our guide "Securing a node with SSL/TLS"
# advanced users might find it better to follow the instructions in the guide
# If that's your preference, go ahead and check our guides https://docs.fleek.network
#
# For the users happy to have the script assist in the installation process of Fleek Network
# and the required dependencies, run the script at your own risk. 
#
# Contributing?
# - If you'd like to test changes locally use the env var `USE_BRANCH_NAME_FOR_GH_RAW`, for remote locales pulls
#
# Found an issue? Please report it here: https://github.com/fleek-network/get.fleek.network

# 🚑 Check if running in Bash and supported version
[ "$BASH" ] || { printf >&2 '🙏 Run the script with Bash, please!\n'; exit 1; }
(( BASH_VERSINFO[0] > 4 || BASH_VERSINFO[0] == 4 && BASH_VERSINFO[1] >= 2 )) || { printf >&2 '🙏 Bash 4.2 or newer is required!\n'; exit 1; }

# Date
dateRuntime=$(date '+%Y%m%d%H%M%S')

# Defaults
defaultUrsaNginxHttpsConfFilename="ursa-https.conf"
defaultUrsaConfigFilename="config.toml"
defaultUrsaBasePath="$HOME/.ursa"
defaultUrsaConfigPath="$defaultUrsaBasePath/$defaultUrsaConfigFilename"
defaultUrsaConfigBackupPath="$defaultUrsaConfigPath.backup.$dateRuntime"
defaultACMEChallengeMsgPlaceholder="_domain_ ACME Challenge directory is healthy!"

declare -a requiredPorts=(80 443 4069 6009)

# User data
selectedDomainName=""
selectedEmailAddress=""
selectedIpAddress=""
selectedNginxSitesAvailablePath=""
selectedNginxSitesEnabledPath=""

getIpAddress() {
  detectedIpAddress=$(curl -s ifconfig.me)

  if validateIpAddress "$detectedIpAddress"; then
    echo "$detectedIpAddress"

    return
  fi

  detectedIpAddress=$(curl -s icanhazip.com)

  if validateIpAddress "$detectedIpAddress"; then
    echo "$detectedIpAddress"

    return
  fi

  detectedIpAddress=$(curl -s ident.me)

  if validateIpAddress "$detectedIpAddress"; then
    echo "$detectedIpAddress"

    return
  fi

  echo "ERROR_IP_ADDRESS_NOT_AVAILABLE"
}

if ! sudo certbot renew --dry-run; then
  rm -rf /etc/nginx/sites-enabled/ursa-https.conf

  sudo systemctl restart nginx

  detectedIpAddress=$(getIpAddress)

  printf "The server public IP address the domain is pointing to is required! We found the public IP address for this machine to be %s\n" "$detectedIpAddress"
  printf -v prompt "🤖 Is the domain name %s pointing to the public IP address %s? (yes/no) " "$selectedDomainName" "$detectedIpAddress"
  while read -rp "$prompt"$'\n> ' answer; do
    if [[ $answer == [nN] || $answer == [nN][oO] ]]; then
      printf "💩 Oh no! The %s has to point to the server public IP address %s. Alternatively, you can check our guides and install the Ursa CLI on your own, but is likely that the security of your server will be taken into account by the rewards mechanism. To avoid disappointment follow the recomendations!\n" "$selectedDomainName" "$detectedIpAddress"  

      continue
    fi

    if [[ $answer == [yY] || $answer == [yY][eE][sS] ]]; then
      # Dig is required for the next step
      if ! dpkg -s bind9-dnsutils >/dev/null; then
        echo "🙋‍♀️ bind9-dnsutils is required, we'll go ahead and install it"
        printf "🤖 Update and upgrade apt-get\n"
        sudo DEBIAN_FRONTEND=noninteractive apt-get update -yq
        sudo DEBIAN_FRONTEND=noninteractive apt-get upgrade -yq

        if ! sudo DEBIAN_FRONTEND=noninteractive apt-get install bind9-dnsutils -y; then
          printf "👹 Oops! Failed to install dnsutils for some reason...\n"
        fi
      fi

      if ! dig "$selectedDomainName" +nostats +nocomments +nocmd | tr -d '\t' | grep "A$detectedIpAddress" >/dev/null 2>&1 ; then
        printf "💩 Oh no! The %s doesn't seem to point to the IP address %s\n" "$selectedDomainName" "$detectedIpAddress"

        continue
      fi

      selectedIpAddress="$detectedIpAddress"

      break
    fi

    printf "😅 Sorry! Try that again...\n"
  done

  printf "Let's Encrypt provides SSL/TLS Certificates for securing the communications. A valid email address is required by the Let's Encrypt organisation (Fleek Network is not affiliated and does NOT store the email address).\n"
  printf -v prompt "What's your email address?"
  while read -rp "$prompt"$'\n> ' answer; do
    if confirmEmailAddress "$answer"; then
      selectedEmailAddress="$answer"
      break
    fi

    printf "💩 Oh no! The email address doesn't seem valid, try again...\n"
  done

  printf "🚑 ACME Challenge health-check\n"
  if ! curl -s "http://$selectedDomainName/.well-known/acme-challenge/healthcheck" | grep -q "${defaultACMEChallengeMsgPlaceholder/_domain_/$selectedDomainName}"; then
    printf "💩 Uh-oh! The ACME Challenge health-check failed for some reason, make sure you don't have any firewall or apps blocking ports %s...\n" "${requiredPorts[*]}"
  fi

  sudo certbot certonly \
    --webroot -w /var/www/"$selectedDomainName" \
    --email "$selectedEmailAddress" \
    --domain "$selectedDomainName" \
    --rsa-key-size 4096 \
    --agree-tos -n \
    --force-renewal \
    -v

  if sudo nginx -t; then
    sudo systemctl restart nginx
  else
    printf "👹 Oh no! The Nginx configuration syntax is invalid, looks like a bug. Help us improve and report in our discord channel, please!\n"

    exit 1
  fi

  printf "🤖 Enable Nginx HTTPS\n"
  sudo ln -s "$selectedNginxSitesAvailablePath/$defaultUrsaNginxHttpsConfFilename" "$selectedNginxSitesEnabledPath/$defaultUrsaNginxHttpsConfFilename"

  service nginx reload

  if ! sudo certbot renew --dry-run; then
    printf "😓 This is very unfortunate! The certbot renewal verification process failed for %s\nThe installer will continue, but is likely that when the SSL/TLS Certificate expires, the scheduled renewal will fail" "$selectedDomainName"

    sleep 8
  fi

  printf "🤖 Set Ursa server IP Address in the configuration file\n"
  if [[ -f "$defaultUrsaConfigPath" ]]; then
    echo "🤖 The installer found that a Ursa config directory already exists at $defaultUrsaConfigPath. The install wizard will update the addresses in the config.toml with your server IP addresss."

    if ! sed -i "s|addresses =.*|addresses = [\"/ip4/$selectedIpAddress/tcp/80\"]|" "$defaultUrsaConfigPath"; then
      printf "👹 Oh no! Failed to update the addresses with your server IP adress (%s) in the config.toml\n" "$selectedIpAddress"

      exit 1
    fi
  else
    if ! mkdir -p "$defaultUrsaBasePath"; then
      printf "👹 Oh no! Failed to create the directory %s\n" "$defaultUrsaBasePath"

      exit 1
    fi

    if ! touch "$defaultUrsaConfigPath"; then
      printf "👹 Oh no! Failed to create the config.toml at %s\n" "$defaultUrsaBasePath"

      exit 1
    fi

    if ! echo "[server_config]" >> "$defaultUrsaConfigPath" || ! echo "addresses = [\"/ip4/$selectedIpAddress/tcp/80\"]" >> "$defaultUrsaConfigPath"; then
      printf "👹 Oh no! Failed to populate the config file %s\n" "$defaultUrsaConfigPath"

      exit 1
    fi
  fi
fi
