#!/bin/bash

# <!-- IGNORE: This line is intentional DO NOT MODIFY --><pre><script>document.querySelector('body').firstChild.textContent = '#!/bin/bash'</script>

# "Get Fleek Network" is an attempt to make our software more accessible.
# By providing scripts to automate the installation process of our software,
# we believe that it can help improve the onboarding experience of our users.
#
# Quick install: `curl https://get.fleek.network/lets_encrypt | bash`
#
# This script automates the process illustrated in our guide "Securing a node with SSL/TLS"
# advanced users might find it better to follow the instructions in the guide
# If that's your preference, go ahead and check our guides https://docs.fleek.network
#
# For the users happy to have the script assist in the installation process of Fleek Network
# and the required dependencies, run the script at your own risk. 
#
# Contributing?
# - If you'd like to test changes locally use the env var `USE_BRANCH_NAME_FOR_GH_RAW`, for remote locales pulls
#
# Found an issue? Please report it here: https://github.com/fleek-network/get.fleek.network

# 🚑 Check if running in Bash and supported version
[ "$BASH" ] || { printf >&2 '🙏 Run the script with Bash, please!\n'; exit 1; }
(( BASH_VERSINFO[0] > 4 || BASH_VERSINFO[0] == 4 && BASH_VERSINFO[1] >= 2 )) || { printf >&2 '🙏 Bash 4.2 or newer is required!\n'; exit 1; }

# Only interest in 80 and 443, as Ursa might already be running
declare -a requiredPorts=(80 443)

hasPortsAvailable=0
for port in "${requiredPorts[@]}"; do
  if lsof -i :"$port" >/dev/null && ! (lsof -i :"$port" +c0 | grep -q 'ursa-proxy'); then
    printf "💩 Uh-oh! The port %s is required but is in use...\n" "$port"

    hasPortsAvailable=1
  fi
done

if [[ "$hasPortsAvailable" -eq 1 ]]; then
  printf "👹 Oops! Required port(s) are in use, make sure the ports are open before retrying, please!\n"

  exit 1
fi

# Confirm validators
confirmDomainName() {
  local validate="^([a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9]\.)+[a-zA-Z]{2,}$"

  if ! hasCommand whois; then
    sudo DEBIAN_FRONTEND=noninteractive apt-get install whois -yq
  fi

  if whois "$1" | grep -Ei '[Uu]nallocated|returned 0 objects' > /dev/null; then
    return 1
  fi

  [[ $1 =~ $validate ]]
}

confirmEmailAddress() {
  local validate="^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]+$"

  [[ "$1" =~ $validate ]]
}

validateIpAddress() {
  local validate="^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$"

  [[ "$1" =~ $validate ]] && ping -c1 -W1 "$1" > /dev/null
}

getIpAddress() {
  detectedIpAddress=$(curl -s ifconfig.me)

  if validateIpAddress "$detectedIpAddress"; then
    echo "$detectedIpAddress"

    return
  fi

  detectedIpAddress=$(curl -s icanhazip.com)

  if validateIpAddress "$detectedIpAddress"; then
    echo "$detectedIpAddress"

    return
  fi

  detectedIpAddress=$(curl -s ident.me)

  if validateIpAddress "$detectedIpAddress"; then
    echo "$detectedIpAddress"

    return
  fi

  echo "ERROR_IP_ADDRESS_NOT_AVAILABLE"
}

domainNameConfSettingsVerificationHandler() {
  domainCertPath=$(grep -i "cert_path" "$defaultUrsaProxyConfigPath" | cut -d '/' -f 5)
  domainKeyPaty=$(grep -i "key_path" "$defaultUrsaProxyConfigPath" | cut -d '/' -f 5)

  if [[ ! "$domainCertPath" == "$domainKeyPaty" ]]; then
    echo "🤷‍♀️ Unexpected settings in the Ursa configuration file, the domain name in server.tls cert_path and key_path should be equal. Make the necessary changes and save the file before retrying..."
    echo

    exit 1
  fi

  if [[ "$domainCertPath" == "$selectedDomainName" ]]; then
    echo "✅ The Ursa configuration file has server settings and user provided domain name matches the settings"
    echo

    return 0
  fi

  while read -rp "🙋‍♀️ The Ursa configuration for server has the domain set as $domainCertPath. By proceeding the configuration settings will be reset and lost, is this ok? (yes/no) " answer; do
    if [[ $answer == [yY] || $answer == [yY][eE][sS] ]]; then
      rm "$defaultUrsaProxyConfigPath"

      break;
    elif [[ $answer == [nN] || $answer == [nN][oO] ]]; then
      echo "🦖 The Let's Encrypt process has terminated, due to existing configuration file and settings that you have decided to keep."

      exit 1
    fi
  done  
}

ursaServerConfigurationHandler() {
  if [[ ! -d "$defaultUrsaProxyDir" ]]; then
    echo "✅ Create Ursa proxy directory"
    mkdir -p "$defaultUrsaProxyDir"
    touch "$defaultUrsaProxyConfigPath"
  else
    if grep -qi "$defaultLetsEncryptCertificatesLivePath" "$defaultUrsaProxyConfigPath" && grep -qi "[[server]]" "$defaultUrsaProxyConfigPath"; then
      echo "✅ Ursa server proxy configuration exists"
      echo

      # Check if domain name is correct in the settings file
      domainNameConfSettingsVerificationHandler "$1"

      return 0
    fi
  fi

  if [[ $1 -eq "1" ]]; then

    if [[ ! -f "$defaultUrsaProxyConfigPath" ]]; then
      touch "$defaultUrsaProxyConfigPath"
    fi

# Here "no identation" is intentional, do not change
# The top empty line at the top is intentional
echo "
# Server without TLS.
[[server]]
proxy_pass = \"127.0.0.1:4069\"
listen_addr = \"0.0.0.0:80\"
serve_dir_path = \".well-known\"
" > "$defaultUrsaProxyConfigPath" || exit 1
elif [[ $1 -eq "2" ]]; then
# Here "no identation" is intentional, do not change
# The top empty line at the top is intentional
echo "
# Server with TLS
[[server]]
proxy_pass = \"127.0.0.1:4069\"
listen_addr = \"0.0.0.0:443\"

[server.tls]
cert_path = \"$defaultLetsEncryptCertificatesLivePath/$selectedDomainName/fullchain.pem\"
key_path = \"$defaultLetsEncryptCertificatesLivePath/$selectedDomainName/privkey.pem\"

# Admin service.
# You can omit this section as this is the default.
[admin]
addr = \"0.0.0.0:8881\"
" > "$defaultUrsaProxyConfigPath" || exit 1
fi

  echo "✅ Updated the config.toml by including the [server] settings"
  echo
}

hasCommand() {
  command -v "$1" >/dev/null 2>&1
}

runHealthCheckForHTTPS() {
  printf "🚑 Health check %s via HTTPS /ping endpoint\n" "$selectedDomainName"
  if ! curl -s https://$selectedDomainName/ping | grep -q pong; then
    printf "💩 Uh-oh! Failed to health-check the domain %s\n" "$selectedDomainName"
  else
    printf "✅ Health check was successful!\n"
  fi
}

(
  exec < /dev/tty;

  # Defaults
  defaultUrsaPath="$HOME/fleek-network/ursa"
  defaultUrsaConfigFilename="config.toml"
  defaultUrsaBasePath="$HOME/.ursa"
  defaultUrsaConfigPath="$defaultUrsaBasePath/$defaultUrsaConfigFilename"
  defaultUrsaProxyDir="$defaultUrsaBasePath/proxy"
  defaultUrsaProxyConfigPath="$defaultUrsaProxyDir/config.toml"
  defaultLetsEncryptCertificatesLivePath="/etc/letsencrypt/live"

  # User data
  selectedDomainName=""
  selectedEmailAddress=""
  selectedIpAddress=""
  selectedUrsaPath=""

  if ! curl -s localhost:4069/ping | grep -q pong; then
    echo "💩 Uh oh! The ursa network node should be running."

    if systemctl list-units --full -all | grep -q "ursa.service"; then
      while read -rp "🙋‍♀️ The ursa service is available. Would you like to start it now? (yes/no) "; do
        if [[ $answer == [nN] || $answer == [nN][oO] ]]; then
          echo "🦖 The Let's Encrypt setup has terminated. Make sure to have the ursa network node running before retrying..."

          exit 1
        elif [[ $answer == [yY] || $answer == [yY][eE][sS] ]]; then
          if ! sudo systemctl start ursa; then
            echo "👹 Oops! Failed to start the ursa service"

            exit 1
          fi
        fi
      done
    else
      exit 1
    fi
  fi

  while read -rp "🙋‍♀️ Is the Ursa repository source-code in the default path $defaultUrsaPath? Type \"no\" to change the location (yes/no) " answer; do
    if [[ $answer == [nN] || $answer == [nN][oO] ]]; then
      while read -rp "🙋‍♀️ What's the location where the Ursa repository is?" answer; do
        if [[ -d "$answer" ]]; then
          selectedUrsaPath="$answer"
          
          break
        fi

        echo "💩 Uh oh! The path ($answer) doesn't exist, let's try that again..."
      done
    elif [[ $answer == [yY] || $answer == [yY][eE][sS] ]]; then
      selectedUrsaPath="$defaultUrsaPath"

      break;
    fi
  done

  echo "🤖 Change work directory to $selectedUrsaPath"
  if ! cd "$selectedUrsaPath"; then
    echo "👹 Oops! Failed to change work directory to \"$selectedUrsaPath\" for some reason..."
    echo

    exit 1
  fi

  detectedIpAddress=$(getIpAddress)

  printf -v prompt "🤖 What's your domain name address?"
  while read -rp "$prompt"$'\n> ' answer; do
    if confirmDomainName "$answer"; then
      selectedDomainName="$answer"
      break
    fi

    printf "💩 The domain name provided is not valid!\n"

    [[ "$answer" =~ http* ]] && echo "💡 Just type the domain name address, there's no need for http:// or https:// e.g. mynode.example.com"
  done

  echo

  printf "The server public IP address the domain is pointing to is required! We found the public IP address for this machine to be %s\n" "$detectedIpAddress"
  printf -v prompt "🤖 Is the domain name %s pointing to the public IP address %s? (yes/no) " "$selectedDomainName" "$detectedIpAddress"
  while read -rp "$prompt"$'\n> ' answer; do
    if [[ $answer == [nN] || $answer == [nN][oO] ]]; then
      printf "💩 Oh no! The %s has to point to the server public IP address %s. Alternatively, you can check our guides and install the Ursa CLI on your own, but is likely that the security of your server will be taken into account by the rewards mechanism. To avoid disappointment follow the recomendations!\n" "$selectedDomainName" "$detectedIpAddress"  

      continue
    fi

    if [[ $answer == [yY] || $answer == [yY][eE][sS] ]]; then
      # Dig is required for the next step
      if ! dpkg -s bind9-dnsutils >/dev/null; then
        echo "🙋‍♀️ bind9-dnsutils is required, we'll go ahead and install it"
        printf "🤖 Update and upgrade apt-get\n"
        sudo DEBIAN_FRONTEND=noninteractive apt-get update -yq
        sudo DEBIAN_FRONTEND=noninteractive apt-get upgrade -yq

        if ! sudo DEBIAN_FRONTEND=noninteractive apt-get install bind9-dnsutils -y; then
          printf "👹 Oops! Failed to install dnsutils for some reason...\n"
        fi
      fi

      if ! dig "$selectedDomainName" +nostats +nocomments +nocmd | tr -d '\t' | grep "A$detectedIpAddress" >/dev/null 2>&1 ; then
        printf "💩 Oh no! The %s doesn't seem to point to the IP address %s\n" "$selectedDomainName" "$detectedIpAddress"

        continue
      fi

      selectedIpAddress="$detectedIpAddress"

      break
    fi

    printf "😅 Sorry! Try that again...\n"
  done

  echo

  if [[ -d "$defaultLetsEncryptCertificatesLivePath/$selectedDomainName" ]]; then
    echo "⚠️ Lets Encrypt certificates already found in $defaultLetsEncryptCertificatesLivePath/$selectedDomainName."

    while read -rp "🙋‍♀️ Would you like to renew the certificates? (yes/no) " answer; do
      if [[ $answer == [yY] || $answer == [yY][eE][sS] ]]; then

        echo "🤖 Stop the ursa-proxy to free port 80"
        if ! sudo systemctl stop ursa-proxy; then
          echo "👹 Oops! Failed to stop the ursa-proxy that is required to allow the certbot to renew the certificates"

          exit 1
        fi

        if ! certbot certonly \
          --standalone \
          --cert-name "$selectedDomainName"; then
          echo "👹 Oops! Failed to renew the certificates for some reason"

          exit 1
        fi

        echo "✅ The certficates were renewed!"

        echo "🤖 Restart the ursa-proxy"
        if ! sudo systemctl restart ursa-proxy; then
          echo "👹 Oops! Failed to restart the ursa-proxy"

          exit 1
        fi

        runHealthCheckForHTTPS

        exit 0
      elif [[ $answer == [nN] || $answer == [nN][oO] ]]; then
        echo "💩 Oh no! Backup your certificates and clear the directory to retry and run this process"
        echo

        exit 1
      fi
    done
  else
    echo "💡 The Let's Encrypt path $defaultLetsEncryptCertificatesLivePath will be created during this process..."
    echo
  fi

  echo

  printf "Let's Encrypt provides SSL/TLS Certificates for securing the communications. A valid email address is required by the Let's Encrypt organisation (Fleek Network is not affiliated and does NOT store the email address).\n"
  printf -v prompt "What's your email address?"
  while read -rp "$prompt"$'\n> ' answer; do
    if confirmEmailAddress "$answer"; then
      selectedEmailAddress="$answer"
      break
    fi

    printf "💩 Oh no! The email address doesn't seem valid, try again...\n"
  done

  echo

  # Ursa server configuration handler to ensure the settings exist and correct
  ursaServerConfigurationHandler 1

  echo "🤖 Ursa proxy"

  if systemctl list-units --full -all | grep -q "ursa-proxy.service"; then
    echo "✅ The Ursa-proxy service is available"
    echo

    if systemctl is-active --quiet ursa-proxy; then
      echo "🦖 We'll stop the ursa-proxy for a bit, for certbot standalone web server"
      sudo systemctl stop ursa-proxy
    fi
  else
    while read -rp "🙋‍♀️ The ursa-proxy service was not found. Would you like to have it installed now? (yes/no) " answer; do
      if [[ $answer == [yY] || $answer == [yY][eE][sS] ]]; then
        read -rp "💡 The ursa-proxy service installer is a separate process that will be executed, when complete, the Let's Encrypt setup will continue. Press ENTER to continue..."

        if ! curl -s https://get.fleek.network/install_ursa_proxy | bash; then
          echo "👹 Oh no! Failed to install the ursa-proxy"

          exit 1
        fi

        echo "🦖 We'll stop the ursa-proxy for now. The certbot standalone web server will launch for the certification process shortly"
        sudo systemctl stop ursa-proxy

        break;
      elif [[ $answer == [nN] || $answer == [nN][oO] ]]; then
        echo "🦖 The Lets Encrypt setup was interrupted because the ursa-proxy is not installed. Make sure that you install, setup the ursa-proxy before retrying..."

        exit 1
      fi
    done
  fi

  echo "🤖 Certbot"
  if ! hasCommand whois; then
    sudo add-apt-repository ppa:certbot/certbot
    sudo DEBIAN_FRONTEND=noninteractive apt-get update
    sudo DEBIAN_FRONTEND=noninteractive apt-get install certbot -yq
  else
    echo "✅ Certbot is available"
  fi

  printf "🤖 Get and install your certificates (will generate temporary file at %s)\n" "$selectedUrsaPath"
  if ! sudo certbot certonly \
    --standalone \
    --preferred-challenges http \
    --email "$selectedEmailAddress" \
    --domain "$selectedDomainName" \
    --rsa-key-size 4096 \
    --agree-tos -n; then
    echo "👹 Oops! Failed to create the certificate"
    echo
    echo "💡 If you already had Certbot installed, make sure you update to latest before retrying please"

    exit 1
  else
    echo "✅ Certbot process completed"
  fi

  if [[ -d "$selectedUrsaPath/.well-known" ]]; then
    echo "💩 Uh oh! The temporary directory $selectedUrsaPath/.well-known should've been removed. Feel free to delete it!"
    echo
  fi

  echo

  echo "🤖 The ursa-proxy service is now going to restart"
  if ! sudo systemctl restart ursa-proxy; then
    printf "👹 Oops! Failed to restart the ursa-proxy systemd service\n"

    exit 1
  fi

  printf "🚑 Ursa proxy health-check\n"
  pingAttempts=0
  while ! curl -s "$selectedDomainName/ping" | grep -q pong; do
    if [[ "$pingAttempts" -gt 10 ]]; then
      echo "👹 Oh no! Failed to health-check the ursa proxy"
      echo

      exit 1
    fi

    printf "🤖 Awaiting for Ursa proxy on port 80, attempt number %s...\n" "$pingAttempts"
    sleep 1

    ((pingAttempts++))
  done

  printf "🤖 Set Ursa server IP Address in the configuration file\n"
  if [[ -f "$defaultUrsaConfigPath" ]]; then
    echo "🤖 The installer found that a Ursa config directory already exists at $defaultUrsaConfigPath. The install wizard will update the addresses in the config.toml with your server IP addresss."

    if ! sed -i "s|addresses =.*|addresses = [\"/ip4/$selectedIpAddress/tcp/80\"]|" "$defaultUrsaConfigPath"; then
      printf "👹 Oh no! Failed to update the addresses with your server IP adress (%s) in the config.toml\n" "$selectedIpAddress"

      exit 1
    fi
  else
    if ! mkdir -p "$defaultUrsaBasePath"; then
      printf "👹 Oh no! Failed to create the directory %s\n" "$defaultUrsaBasePath"

      exit 1
    fi

    if ! touch "$defaultUrsaConfigPath"; then
      printf "👹 Oh no! Failed to create the config.toml at %s\n" "$defaultUrsaBasePath"

      exit 1
    fi

    if ! echo "[server_config]" >> "$defaultUrsaConfigPath" || ! echo "addresses = [\"/ip4/$selectedIpAddress/tcp/80\"]" >> "$defaultUrsaConfigPath"; then
      printf "👹 Oh no! Failed to populate the config file %s\n" "$defaultUrsaConfigPath"

      exit 1
    fi
  fi

  echo

  echo "🤖 Set Ursa proxy configuration for SSL/TLS"
  ursaServerConfigurationHandler 2

  echo

  if [[ ! -d $defaultLetsEncryptCertificatesLivePath/$selectedDomainName ]]; then
    echo "💩 Uh no! You have some cleaning to do because we've failed to find the $selectedDomainName certificates directory"
    echo
    echo "When the Let's Encrypt Certbot app creates certificates for domain names that were previously computed, a directory i$selectedDomainName-000x is created to prevent name clash. If that's the case, you can have this easily fixed."
    echo
    echo "Check the list of certificates:"
    echo "sudo certbot certificates"
    echo
    echo "Delete a certificate:"
    echo "sudo certbot delete --cert-name example.com"
    echo
    echo "✨ Once ready, run this script again."

    exit 1
  fi

  echo

  echo "✅ The certification is now complete!"
  echo "The ursa-proxy configuration was updated, including the SSL/TLS certifications, etc."
  echo
  echo "🤖 The ursa-proxy service is now going to restart"
  if ! sudo systemctl restart ursa-proxy; then
    printf "👹 Oops! Failed to restart the ursa-proxy systemd service\n"

    exit 1
  fi

  echo

  runHealthCheckForHTTPS
)