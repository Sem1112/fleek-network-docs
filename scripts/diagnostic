#!/bin/bash

# "Get Fleek Network" is an attempt to make our software more accessible.
# By providing scripts to automate the installation process of our software,
# we believe that it can help improve the onboarding experience of our users.
#
# Quick diagnostic: `curl https://get.fleek.network/diagnostic | bash`
#
# This scripts automates the process of getting detailed information about the server where Ursa is running
# such as, file permissions, systemd services, user, paths, etc.
#
# Found an issue? Please report it here: https://github.com/fleek-network/get.fleek.network

# üöë Check if running in Bash and supported version
[ "$BASH" ] || { printf >&2 'üôè Run the script with Bash, please!\n'; exit 1; }
(( BASH_VERSINFO[0] > 4 || BASH_VERSINFO[0] == 4 && BASH_VERSINFO[1] >= 2 )) || { printf >&2 'üôè Bash 4.2 or newer is required!\n'; exit 1; }

#defaults
nginxConfigPath="$HOME/fleek-network/ursa/docker/full-node/data/nginx"
diagnosticFilename="diagnostic.log"
defaultFleekNetworkInstallPath="$HOME/fleek-network/ursa"
dotUrsaPath="$HOME/.ursa/config.toml"
defaultUrsaBinPath="/usr/bin/ursa"
pasteCliUrl="https://0x0.st"

#¬†styles
bold=$(tput bold)
normal=$(tput sgr0)

# Service ports
declare -a fleekNetworkServicePorts=(80 443 4069 6009)

tempWorkDir=$(mktemp -d)

onInterruption() {
  rm -rf "$tempWorkDir"
}

trap onInterruption INT

if ! cd "$tempWorkDir"; then
  echo "üëπ Oops! Failed to create temporary directory to store diagnostic logs"

  exit 1
fi

cat << "EOF"

                  .eeeeeeeee
                  .$$$$$$$$P"
                .$$$$$$$$P
                z$$$$$$$$P
              z$$$$$$$$"
              z$$$$$$$$"
            d$$$$$$$$"
            d$$$$$$$$"
          .d$$$$$$$P
        .$$$$$$$$P
        .$$$$$$$$$.........
      .$$$$$$$$$$$$$$$$$$"
      z$$$$$$$$$$$$$$$$$P"
    -**********$$$$$$$P
              d$$$$$$"
            .d$$$$$$"
            .$$$$$$P"
          z$$$$$$P
          d$$$$$$"
        .d$$$$$$"
      .$$$$$$$"
      z$$$$$$$beeeeee
    d$$$$$$$$$$$$$*
    ^""""""""$$$$$"
            d$$$*
          d$$$"
          d$$*
        d$P"
      .$$"
      .$P"
    .$"
    .P"
  ."
  /"

EOF

echo
echo "‚ö°Ô∏è Ursa spaceship diagnostics ‚ö°Ô∏è"
echo
echo "‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ üåç Website https://fleek.network"
echo "‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ üìö Documentation https://docs.fleek.network"
echo "‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ üíæ Git repository https://github.com/fleek-network/ursa"
echo "‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ ü§ñ Discord https://discord.gg/fleekxyz"
echo "‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ üê§ Twitter https://twitter.com/fleek_net"
echo "‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ üé® Ascii art by https://www.asciiart.eu"
echo

echo "üôã‚Äç‚ôÄÔ∏è We're going save the diagnostic details to https://0x0.st. When complete copy and share the diagnostics URL to us in our Discord channel!"
echo

echo "üôè Be patient while we generate the URL for you, please!"
echo

(
  echo "ü§ñ Display Linux distro version"
  echo

  cat /etc/*-release
  echo

  echo "ü§ñ User home"
  echo "$HOME"

  echo "üí° The current user details"
  id
  echo "User name is $USER"
  echo

  echo "ü§ñ System PATH"
  echo "$PATH"
  echo

  echo "ü§ñ Ports"
  hasPortsAvailable=0
  for port in "${fleekNetworkServicePorts[@]}"; do
    if lsof -i :"$port" >/dev/null; then
      echo "üí© Uh-oh! The port $port is required but is in use..."

      hasPortsAvailable=1
    fi
  done

  echo

  if [[ "$hasPortsAvailable" -eq 1 ]]; then
    echo "üëπ Oops! Required port(s) are in use, make sure the ports are open before retrying, please!"
    echo
  fi

  echo

  echo "ü§ñ Iptables list of rules"
  iptables -S
  echo

  if command -v "ufw" >/dev/null 2>&1; then
    echo "‚úÖ ufw found!"

    echo "ü§ñ UFW Status"
    ufw status
  fi

  echo

  echo "ü§ñ Is the Ursa source-code installed in user home?"

  if [[ ! -d "$HOME/fleek-network/ursa" ]]; then
    echo "üí© Uh-oh! The Ursa source-code is not installed in the user HOME path $HOME"
    echo

    echo "ü§ñ Is the Ursa source-code installed in root home?"
    
    if [[ ! -d "/root/fleek-network/ursa" ]]; then
      echo "üí© Uh-oh! The Ursa source-code is not installed in the root HOME path /root/fleek-network/ursa"
      echo
    else
      echo "‚úÖ Found the Ursa source stored in /root/fleek-network/ursa"
    fi
  else
    echo "‚úÖ Found the Ursa source stored in $HOME/fleek-network/ursa"
  fi

  echo "ü§ñ File permissions"
  ls -la "$defaultFleekNetworkInstallPath"
  echo

  echo "ü§ñ Check Docker"
  echo

  if command -v "docker" >/dev/null 2>&1; then
    echo "‚úÖ Docker is installed!"

    echo "Docker path"
    dockerPath=$(which docker)
    echo "$dockerPath"

    echo "Docker permissions"
    ls -la "$dockerPath"

    echo "Docker version"
    docker -v
    
    echo "Docker systemd status"
    systemctl status --no-pager docker

    echo "Docker process status"
    docker ps -a

    echo "Is Docker container full-node_ursa_1 running?"
    docker container inspect -f '{{.State.Running}}' full-node_ursa_1

    echo "ü§ñ NGINX Config files"

    showNginxConfigContent() {
      if [[ -f "$nginxConfigPath/$1" ]]; then
        cat "$nginxConfigPath/$1"

        return 0
      fi
      
      echo "üí© Uh-oh! NGINX Https config not found at $nginxConfigPath/$1"
    }

    for conf in "http.conf" "https.conf"; do
      showNginxConfigContent "$conf"
    done
  fi

  echo "ü§ñ Dot Ursa"

  if [[ -d $HOME/.ursa ]]; then
    echo "‚úÖ Found dot ursa at $HOME/.ursa"
    echo

    echo "ü§ñ Dot Ursa Config.toml"
    echo

    cat "$dotUrsaPath"
    echo

    echo "ü§ñ Dot Ursa file permissions"
    ls -la "$dotUrsaPath"
    echo
  else
    echo "üí© Uh-oh! The dot Ursa was not found"
  fi

  if command -v "ursa" >/dev/null 2>&1; then
    echo "‚úÖ Ursa binary globally accessible"

    if [[ -f "$defaultUrsaBinPath" ]]; then
      echo "‚úÖ Ursa binary in $defaultUrsaBinPath"
    else
      echo "üí© Ursa binary not found at $defaultUrsaBinPath";
    fi

    echo

    if [[ :$PATH: = *:"$defaultUrsaBinPath":* ]]; then
      echo "‚úÖ Ursa $defaultUrsaBinPath in system PATH";
    else
      echo "üí© Ursa $defaultUrsaBinPath not found in system PATH";
    fi

    echo

    echo "ü§ñ Ursa binary file permissions"
    ls -la "$defaultUrsaBinPath"
    echo

    if ! docker ps -a | grep -q ursa; then
      echo "ü§ñ NGINX Service status"
      systemctl status --no-pager nginx
      echo
    fi
  fi

) > "$diagnosticFilename"

pasteUrl=$(curl -sF "file=@$diagnosticFilename" $pasteCliUrl)

if [[ ! $pasteUrl = $pasteCliUrl*  ]]; then
  echo "üëπ Oops! We failed to create the diagnostic URL for some reason, try again later?" >&2

  exit 1
fi

echo "‚úÖ Diagnostic is available at ${bold}$pasteUrl${normal}"
echo