#!/bin/bash

# "Get Fleek Network" is an attempt to make our software more accessible.
# By providing scripts to automate the installation process of our software,
# we believe that it can help improve the onboarding experience of our users.
#
# Quick diagnostic: `curl https://get.fleek.network/diagnostic | bash`
#
# This scripts automates the process of getting detailed information about the server where Ursa is running
# such as, file permissions, systemd services, user, paths, etc.
#
# Found an issue? Please report it here: https://github.com/fleek-network/get.fleek.network

# 🚑 Check if running in Bash and supported version
[ "$BASH" ] || { printf >&2 '🙏 Run the script with Bash, please!\n'; exit 1; }
(( BASH_VERSINFO[0] > 4 || BASH_VERSINFO[0] == 4 && BASH_VERSINFO[1] >= 2 )) || { printf >&2 '🙏 Bash 4.2 or newer is required!\n'; exit 1; }

#defaults
nginxConfigPath="$HOME/fleek-network/ursa/docker/full-node/data/nginx"
diagnosticFilename="diagnostic.log"
defaultFleekNetworkInstallPath="$HOME/fleek-network/ursa"
dotUrsaPath="$HOME/.ursa/config.toml"
dotUrsaProxyPath="$HOME/.ursa/proxy/config.toml"
defaultUrsaBinPath="/usr/bin/ursa"
pasteCliUrl="https://0x0.st"
separator="----------"

# User data
selectedUrsaPath=""

# styles
bold=$(tput bold)
normal=$(tput sgr0)

# Service ports
declare -a fleekNetworkServicePorts=(80 443 4230 6009)

tempWorkDir=$(mktemp -d)

onInterruption() {
  rm -rf "$tempWorkDir"
}

trap onInterruption INT

if ! cd "$tempWorkDir"; then
  echo "👹 Oops! Failed to create temporary directory to store diagnostic logs"

  exit 1
fi

validateIpAddress() {
  local validate="^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$"

  [[ "$1" =~ $validate ]] && ping -c1 -W1 "$1" > /dev/null
}

getIpAddress() {
  detectedIpAddress=$(curl -s ifconfig.me)

  if validateIpAddress "$detectedIpAddress"; then
    echo "$detectedIpAddress"

    return
  fi

  detectedIpAddress=$(curl -s icanhazip.com)

  if validateIpAddress "$detectedIpAddress"; then
    echo "$detectedIpAddress"

    return
  fi

  detectedIpAddress=$(curl -s ident.me)

  if validateIpAddress "$detectedIpAddress"; then
    echo "$detectedIpAddress"

    return
  fi

  echo "ERROR_IP_ADDRESS_NOT_AVAILABLE"
}

checkDockerServiceRunning() {
  echo "Is Docker container $1 running?"
  if ! docker container inspect -f '{{.State.Running}}' "$1" >/dev/null 2>&1; then
    echo "The Docker service $1 does not exist or is not running!"

    return
  fi

  echo "The Docker service $1 is running!"
}

cat << "EOF"

                  .eeeeeeeee
                  .$$$$$$$$P"
                .$$$$$$$$P
                z$$$$$$$$P
              z$$$$$$$$"
              z$$$$$$$$"
            d$$$$$$$$"
            d$$$$$$$$"
          .d$$$$$$$P
        .$$$$$$$$P
        .$$$$$$$$$.........
      .$$$$$$$$$$$$$$$$$$"
      z$$$$$$$$$$$$$$$$$P"
    -**********$$$$$$$P
              d$$$$$$"
            .d$$$$$$"
            .$$$$$$P"
          z$$$$$$P
          d$$$$$$"
        .d$$$$$$"
      .$$$$$$$"
      z$$$$$$$beeeeee
    d$$$$$$$$$$$$$*
    ^""""""""$$$$$"
            d$$$*
          d$$$"
          d$$*
        d$P"
      .$$"
      .$P"
    .$"
    .P"
  ."
  /"

EOF

echo
echo "⚡️ Ursa spaceship diagnostics ⚡️"
echo
echo "★★★★★★★★★ 🌍 Website https://fleek.network"
echo "★★★★★★★★★ 📚 Documentation https://docs.fleek.network"
echo "★★★★★★★★★ 💾 Git repository https://github.com/fleek-network/ursa"
echo "★★★★★★★★★ 🤖 Discord https://discord.gg/fleekxyz"
echo "★★★★★★★★★ 🐤 Twitter https://twitter.com/fleek_net"
echo "★★★★★★★★★ 🎨 Ascii art by https://www.asciiart.eu"
echo

echo "🙋‍♀️ We're going save the diagnostic details to https://0x0.st. When complete copy and share the diagnostics URL to us in our Discord channel!"
echo

(
  exec < /dev/tty;

  while read -rp "🙋‍♀️ Is the Ursa repository source-code in the default path $defaultFleekNetworkInstallPath? (yes/no) " answer; do
    if [[ $answer == [nN] || $answer == [nN][oO] ]]; then
      while read -rp "🙋‍♀️ What's the location where the Ursa repository is? " answer; do
        if [[ -d "$answer" ]]; then
          selectedUrsaPath="$answer"
          
          break 2
        fi

        echo "💩 Uh oh! The path ($answer) doesn't exist, let's try that again..."
      done
    elif [[ $answer == [yY] || $answer == [yY][eE][sS] ]]; then
      selectedUrsaPath="$defaultFleekNetworkInstallPath"

      break;
    fi
  done

  echo
  echo

  read -rp "🙏 Be patient while we generate the URL for you, please! Press ENTER to continue..."

  echo "🤖 Display Linux distro version"
  echo

  cat /etc/*-release
  echo

  echo "🤖 The /proc/version"
  cat /proc/version

  echo "🤖 CPU details"
  cat /proc/cpuinfo

  echo "🤖 Memory info"
  mem=$(awk '/^MemTotal:/{print $2}' /proc/meminfo);
  partDiskSpace=$(df --output=avail -B 1 "$PWD" |tail -n 1)
  echo "Total memory $mem"
  echo "Disk space $partDiskSpace"

  echo "🤖 User home"
  echo "$HOME"
  echo

  echo "💡 The current user details"
  id
  echo

  echo "User name is $USER"
  echo

  echo "🤖 System PATH"
  echo "$PATH"
  echo

  echo "🤖 User IP Address"
  getIpAddress

  echo "🤖 Ports"
  hasPortsAvailable=0
  for port in "${fleekNetworkServicePorts[@]}"; do
    if lsof -i :"$port" >/dev/null; then
      echo "The port $port which is required but is in use"
      echo "$separator Start details for port $port $separator"
      lsof -i :"$port"
      echo "$separator End details for port $port $separator"
      echo

      hasPortsAvailable=1
    fi
  done

  echo

  if [[ "$hasPortsAvailable" -eq 1 ]]; then
    echo "👹 Required port(s) are in use."
    echo
  fi

  echo

  echo "🤖 Iptables list of rules"
  iptables -S
  echo

  if command -v "ufw" >/dev/null 2>&1; then
    echo "✅ ufw found!"

    echo "🤖 UFW Status"
    ufw status
  fi

  echo

  echo "🤖 Is the Ursa source-code installed in user home?"
  echo

  if [[ ! -d "$HOME/fleek-network/ursa" ]]; then
    echo "💩 Uh-oh! The Ursa source-code is not installed in the user HOME path $HOME"
    echo

    echo "🤖 Is the Ursa source-code installed in root home?"
    echo
    
    if [[ ! -d "/root/fleek-network/ursa" ]]; then
      echo "💩 Uh-oh! The Ursa source-code is not installed in the root HOME path /root/fleek-network/ursa"
      echo
    else
      echo "✅ Found the Ursa source stored in /root/fleek-network/ursa"
      echo
    fi
  else
    echo "✅ Found the Ursa source stored in $HOME/fleek-network/ursa"
    echo
  fi

  echo "🤖 File permissions"
  echo
  ls -la "$selectedUrsaPath"
  echo

  if [[ -d $selectedUrsaPath ]]; then
    echo "🤖 The docker-compose.yml content"
    cat "$selectedUrsaPath/docker/full-node/docker-compose.yml"
  fi

  echo "🤖 Check Docker"
  echo

  if command -v "docker" >/dev/null 2>&1; then
    echo "✅ Docker is installed!"
    echo

    echo "Docker path"
    dockerPath=$(which docker)
    echo

    echo "$dockerPath"
    echo

    echo "Docker permissions"
    ls -la "$dockerPath"
    echo

    echo "Docker version"
    docker -v
    echo

    echo "Docker compose version"
    docker compose version

    echo "Docker-compose is installed?"
    which docker-compose

    echo "Docker systemd status"
    sudo systemctl status --no-pager docker
    echo

    echo "Docker process status"
    docker ps -a
    echo

    checkDockerServiceRunning "full-node_ursa_1"
    echo

    checkDockerServiceRunning "full-node-ursa-1"
    echo

    checkDockerServiceRunning "full-node_ursa-proxy_1"
    echo

    checkDockerServiceRunning "full-node-ursa-proxy-1"
    echo

    echo "🤖 NGINX Config files"
    echo

    showNginxConfigContent() {
      if [[ -f "$nginxConfigPath/$1" ]]; then
        cat "$nginxConfigPath/$1"

        return 0
      fi
      
      echo "💩 Uh-oh! NGINX Https config not found at $nginxConfigPath/$1"
      echo
    }

    for conf in "http.conf" "https.conf"; do
      showNginxConfigContent "$conf"
    done
  fi

  echo "🤖 Dot Ursa"
  echo

  if [[ -d $HOME/.ursa ]]; then
    echo "✅ Found dot ursa at $HOME/.ursa"
    echo

    echo "🤖 Dot Ursa Config.toml"
    echo

    cat "$dotUrsaPath"
    echo

    echo "🤖 Dot Ursa file permissions"
    ls -la "$dotUrsaPath"
    echo
  else
    echo "💩 Uh-oh! The dot Ursa was not found"
    echo
  fi

  if [[ -d $HOME/.ursa/proxy ]]; then
    echo "✅ Found dot ursa, ursa-proxy at $HOME/.ursa/proxy"
    echo

    echo "🤖 The ursa proxy config content"
    cat "$dotUrsaProxyPath"
  else
    echo "💩 Uh-oh! The dot Ursa, ursa-proxy was not found"
    echo
  fi

  if command -v "ursa" >/dev/null 2>&1; then
    echo "✅ Ursa binary globally accessible"
    echo

    if [[ -f "$defaultUrsaBinPath" ]]; then
      echo "✅ Ursa binary in $defaultUrsaBinPath"
      echo
    else
      echo "💩 Ursa binary not found at $defaultUrsaBinPath";
      echo
    fi

    echo

    if [[ :$PATH: = *:"$defaultUrsaBinPath":* ]]; then
      echo "✅ Ursa $defaultUrsaBinPath in system PATH";
      echo
    else
      echo "💩 Ursa $defaultUrsaBinPath not found in system PATH";
      echo
    fi

    echo

    echo "🤖 Ursa binary file permissions"
    ls -la "$defaultUrsaBinPath"
    echo

    if ! docker ps -a | grep -q ursa; then
      echo "🤖 NGINX Service status"
      echo
      
      sudo systemctl status --no-pager nginx
      echo
    fi
  fi

  if [[ -d $HOME/.ursa/proxy ]]; then
    echo "✅ Found dot ursa, ursa-proxy at $HOME/.ursa/proxy"
    echo

    echo "🤖 The ursa proxy config content"
    cat "$dotUrsaProxyPath"

    if command -v "ursa-proxy" >/dev/null 2>&1; then
      echo "✅ Ursa-proxy binary globally accessible"

      echo "🤖 Systemd ursa-proxy service"
      if ! sudo systemctl status ursa-proxy; then
        echo "💩 Uh oh! There's no systemd ursa-proxy service"
      fi
    fi
  else
    echo "💩 Uh-oh! The dot Ursa, ursa-proxy was not found"
    echo
  fi

  echo "🤖 curl local /ping"
  curl -sw "\n" localhost/ping
) > "$diagnosticFilename"

pasteUrl=$(curl -sF "file=@$diagnosticFilename" $pasteCliUrl)

if [[ ! $pasteUrl = $pasteCliUrl*  ]]; then
  echo "👹 Oops! We failed to create the diagnostic URL for some reason, try again later?" >&2

  exit 1
fi

echo "✅ Diagnostic is available at ${bold}$pasteUrl${normal}"
echo "Copy and share the diagnostic URL $pasteUrl to our Discord channel 🙏"
echo